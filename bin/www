#!/usr/bin/env node


/**
 * Load the configs
 */
var config = require('../config_old/default_config');
console.log(config.get('port'));


/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('dfs-cours:server');
var http = require('http');


/**
 * MongoClient
 */
const MongoClient = require('mongodb').MongoClient;

const user = config.get("DB_USER");
const password = config.get("DB_PASSWORD");
const db = config.get('db:host');
const url = `mongodb+srv://${user}:${password}@clusterdfsromarin-jna6x.mongodb.net/test?retryWrites=true&w=majority`;

const client = new MongoClient(url);

client.connect(function(err) {
  if (err) {
    console.log("\n");
    console.log(url + "\n");
    console.log(user + "\n");
    console.log(password + "\n");
    throw err;
  }
  console.log("Connected correctly to server");

  client.close();
});




/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
